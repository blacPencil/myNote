版本管理工具

作用：备份、记录历史、回到过去、多端共享(云服务)、团队协作、


版本管理工具的发展历史
	cvs(集中式)     svn(集中式)     git(分布式)     github(托管网站)

cvs需要联网
svn集大成者，将版本工具发扬光大，只有联网才能提交

集中式：需要中心服务器来放文件

分布式：每一个拥有版本库的人，都可以在不联网情况下，进行文件提交、查看记录、删除等操作。效率比集中式高。


github新建一个项目
	README ：写一些项目介绍

检出项目到本地
	* 现在github主页，复制项目的url到剪贴板

	* 到git命令行，用git clone + url 将项目下载到本地。

	* 则当前就为工作区，既可以在工作区进行工作

提交项目
	* 新建文件 ，如：日记.txt
	* git status 查看当前工作区状态。
	* git add 日记.txt，对这个文件建立一个跟踪
	* 再次执行  git status 
	* git commit 执行提交变更，会要求填写一个变更评论.
	* git push 提交到github上



解决冲突
	同一时间里，有两个程序员对同一段代码进行修改，就会抛出冲突。

	* git pull 将github上的文件拉下来。


如何回到过去
	* git log 查看之前有哪些提交
	* git reset    - -hard 19a3adhdjhakadl332u3rkjhjhrwejrb 
		hard 后面参数是一个指针，log中commit后面的数
	* git relog 列出当前版本之前的版本号，
	* git reset   - -hard 19aed2e 跳回未来

建立里程碑
	一个版本号
	进入github 选择release , draff a new release
	填写 版本号1.0 ，写一些简介，点Publishing 发布软件。
	就可以把整个源码下载。


分支开发
	如昨天发布一个软件版本，今天有人说里面有一个bug，而且原来的master代码已经修改了，所以要新建一个master，以发布的那个软件为基础进行修改，修改完之后再同步到正在开发的当前分支上。
	可以不考虑现有开发的基础上，把bug解决。

	* 创建一个新分支，修改代码
	* 使用分支工具中的merge功能

另一种合并方式
	

多人合作的一些经验
	多用客户端和工具，少用命令行。
	每次提交前，diff自己的代码，以免提交错误的代码
	下班回家前，整理好自己的工作区。
	要保留的代码提交到版本工具上，不需要的删掉。
	
	并行的项目，使用分支开发。使用独立的分支开发。
	
	









	








