Java反射

1.Class类的使用
2.方法的反射
3.成员变量的反射
4.构造函数的反射
5.Java类加载机制 

=========================================
Class类————ClassDemo源程序

面向对象中，万物都是对象
	Java中，静态成员和普通数据类型不是对象。
	那 类是谁的对象？？

类是对象，是java.lang.Class类的实例对象。

	There is a class named Class.

public class ClassDemo1 {

	public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
		// Foo的实例对象
		Foo foo1 = new Foo();
		// Foo这个类也是一个实例对象，Class类的实例对象如何表示？
		// 任何一个类都是Class类的实例对象，有三种表示方式
		// 第一种--->每一个类都有一个隐含的静态成员class
		Class c1 = Foo.class;
		
		// 第二种---> 已知该类的对象，通过getClass方法
		Class c2 = foo1.getClass();
		
		/**
		 *  官网说法：c1,c2表示了Foo类的类类型（class type）
		 *  类也是对象，是Class类的实例对象
		 *  这个对象称为该类的类类型
		 */
		// 不管c1 or c2都代表了Foo类的类类型，一个类只可能是Class类的一个实例对象，下面是true
		System.out.println(c1==c2);
		// 第三种方式--> 
		Class c3 = null;
		c3 = Class.forName("ClassDomo1");
		
		System.out.println(c2 == c3);
		
		// 可以通过类的类类型 创建该类的对象，---》即 可以通过c1 c2 c3创建Foo的对象
		// c1是class类型，要强制类型转换
		Foo foo = (Foo)c1.newInstance(); // Foo需要有无参数的构造方法
	}
}

class Foo{}


- - - - - - - - - - - - - - - - - - - -  - - - — - -
Class类的 动态加载类——ClassDemo.OfficeBetter.java

Class类
	Class.forName(“类的全称”)
1.不仅表示了类的类类型，还表示了动态加载类。
2.编译时刻加载类是静态加载类，运行时刻加载类是动态加载类。

不需要重新编译，新加一个功能，动态的运行使用

功能的添加采用动态加载类。！！

public class OfficeBetter {

	public static void main(String[] args) throws Exception {
		// 动态加载类，想用Word就用word不管excel
		Class c = Class.forName(args[0]);
		
		// 通过类类型，创建该类的对象
		OfficeAble oa = (OfficeAble)c.newInstance();
		oa.start();
	}
}

interface OfficeAble{
	void start();
}
class Word implements OfficeAble{

	@Override
	public void start() {
		System.out.println("word start...");
	}
	
}

- - - - - - - - - - - - - - - - - - - -  - - - — - -
获取方法信息

基本数据类型 同样有对应的类类型

void关键字，都存在类类型。
———————————————————————————
public class ClassDemo2 {
	public static void main(String[] args) {
		Class c1 = int.class; // int的类类型
		Class c2 = String.class; // String类的类类型，String类字节码(不是官方说法)
		Class c3 = double.class;
		Class c4 = Double.class;
		Class c5 = void.class;
		
		// 打印类类型的具体名称，全称
		System.out.println(c1.getName());
		System.out.println(c2.getName());
		// 不包含包名的类的名称
		System.out.println(c2.getSimpleName());
		System.out.println(c5.getName());
		
	}
}
———————————————————————————
获取类的方法信息

import java.lang.reflect.Method;

/**
 * 获取类的全部信息
 * @param args
 */
public class ClassUtil {
	/*
	 * 打印类的信息，包括类的成员函数，成员变量
	 */
	public static void printClassMessage(Object obj){
		// 1.要获取类的信息，首先要获得类的类类型
		Class c = obj.getClass(); // 传递的是哪个子类的对象，c就是该子类的类类型。
		// 2.获取类的名称
		System.out.println("方法名称："+c.getName());
		
		/*
		 * Method类，方法对象
		 * 一个成员方法就是一个Method对象
		 * getMethods()方法获取的是所有的public的函数，包括父类继承而来的
		 * getDeclaredMethods()获取是所有该类自己声明的发那个发，不管访问权限，没有继承来的方法。
		 */
		Method[] ms = c.getMethods();
		// 获取方法信息
		for (int i = 0; i < ms.length; i++) {
			// 得到方法的返回值类型的类类型
			Class returnType = ms[i].getReturnType();
			System.out.print(returnType.getName() + " ");
			// 得到方法的名称
			System.out.println(ms[i].getName());
			
			// 获取参数类型-->得到参数列表的类型 的类类型
			Class[] paramTypes = ms[i].getParameterTypes();
			for (Class class1 : paramTypes) {
				System.out.print(class1.getName()+",");
			}
			System.out.println("-------------");
		}
	}
	public static void main(String[] args) {
		String string = "hello";
		ClassUtil.printClassMessage(string);
	}

}
———————————————————————————
- - - - - - - - - - - - - - - - - - - -  - - - — - -
获取成员变量信息

public static void printFieldMessage(Object obj) {
		/*
		 * =================================================
		 * 成员变量也是对象
		 * java.lang.reflect.Field
		 * Field类封装了关于成员变量的操作
		 * getFields()方法获取的是所有public的成员变量的信息
		 * 
		 * 通过 refactor - extract method
		 */
		Class c = obj.getClass();
		Field[] fs = c.getFields();
		Field[] fields = c.getDeclaredFields();// 自己声明的所有变量信息
		for (Field field : fs) {
			// 得到成员变量的类型的类类型
			Class fieldType = field.getType();
			System.out.println("成员变量："+fieldType.getName());
			// 得到成员变量的名字
			System.out.println(field.getName());
		}
	}

- - - - - - - - - - - - - - - - - - - -  - - - — - -
获取构造函数信息
	public static void printConMessage(Object obj){
		Class c = obj.getClass();
		/*
		 * 构造函数也是对象，java.lang.Constructor中封装了构造信息
		 * getConstructors获取所有的public构造方法
		 * getDeclaredConstructor
		 */
		Constructor[] cs = c.getDeclaredConstructors();
		for (Constructor constructor : cs) {
			System.out.print(constructor.getName() + "(");
			// 获取构造函数的参数列表-->得到参数列表的类类型
			Class[] paramTypes = constructor.getParameterTypes();
			for (Class class1 : paramTypes) {
				System.out.println(class1.getName()+",");
			}
			System.out.println(")");
		}
	}

- - - - - - - - - - - - - - - - - - - -  - - - — - -
方法反射基本操作

1.如何获取某个方法
	方法的名称和方法的参数列表才能唯一决定某个费昂发
2.方法反射的操作
	method.invoke(对象,参数列表);
 - — - - - - - - - - — - - - - - — 
import java.lang.reflect.Method;

public class MethodDemo1 {

	public static void main(String[] args) throws Exception{
		// 要获取 print(int,int)
		// 要获取发法，先要获取类的信息，先要获取类的类类型
		A a1 = new A();
		Class c = a1.getClass();
		// 获取方法，名称和参数列表来决定
//		Method method = c.getMethod("print", new Class[]{int.class,int.class});
		Method m = c.getMethod("print", int.class,int.class);
		
		// 方法的反射操作，用m对象来调用方法，与a1.print调用的效果一样
		// 方法如果没有返回值，返回null,有返回值返回具体的返回值。
		//Object o = m.invoke(a1,new Object[]{10,20});
		Object o = m.invoke(a1,10,20);
		System.out.println("=====================");
		// 获取方法对象
		Method m1 = c.getMethod("print", String.class,String.class);
		// 若无参 ，Method m1 = c.getMethod("print");
		// 用方法对象进行反射操作
		// 本来是a1.print("hello","world")
		o = m1.invoke(a1, "hello","world");
		// 无参 o = m1.invoke(a1);
	}

}
class A{
	public void print(int a,int b){
		System.out.println(a+b);
	}
	public void print(String a,String b){
		System.out.println(a.toUpperCase() + "," + b.toLowerCase());
	}
}

- - - - - - - - - - - - - - - 
通过反射了解泛型本质

通过Class ，Method来认识泛型的本质

集合的泛型，防止错误输入

import java.lang.reflect.Method;
import java.util.ArrayList;

public class MethodDemo2 {

	public static void main(String[] args) throws Exception{
		ArrayList list = new ArrayList<>();
		
		ArrayList<String> list1 = new ArrayList<>();
		list1.add("hello");
		//list1.add(20); 错误的
		Class c1 = list.getClass();
		Class c2 = list1.getClass();
		// 反射操作都是编译之后的操作
		System.out.println(c1==c2);
		// c1==c2 返回true 说明编译之后，集合的泛型是去泛型化的。
		/*
		 * java中集合的泛型，是防止错误输入的，只在编译阶段后效，编译过后无效
		 * 验证，通过方法的反射来操作，绕过编译，就能加非String类型
		 */
		Method m = c2.getMethod("add", Object.class);
		m.invoke(list1,100);
		System.out.println(list1.size());
		System.out.println(list1);
		// 就不能用foreach遍历list1
	}

}
- - — - — -  - - - - - — — - - - - -  — - - 














