JDBC简介

    桥梁=java应用程序 与 数据库
主要内容：
	1.JDBC简介
	2.使用详解
		JDBC常用接口
		JDBC编程步骤
		执行SQL语句
		管理结果集
		事务管理
	3.高级应用
		分页
		高级查询
		高级函数使用
	4.整理总结

=============================================
JDBC简介
	全程：Java Data Base Connectivity，可以为多种数据库提供统一的访问。
	可以连接各种数据库：Oracle，MySQL，Sql Server

例子：
	登陆，输入用户名和密码。
	      用户名、密码          用户名、密码
	客户端——————------—-服务器———------———数据库
          失败，提示用户    |     查询结果
					   登陆成功

服务器与数据库之间数据流通过程，就是使用JDBC。


— - - - - - - - - - - - - - - - - - - - - - - - 
创建一个项目：对面的女孩看过来。

1.工欲善其事必先利其器
	明确目的：需求（做什么）
		*实现逆袭
		*拥有女神禁区，享有查看，添加，修改，删除等功能
	指导思想：概要设计和详细设计（怎么做）
	工具准备：MySQL数据库，MyEclipse，Navicat
	埋头苦干：编码
	实战演练：测试
	大功告成：系统上线

2.JDBC编程步骤

//1.加载驱动程序，通过反射机制，通过一个类名，反向地加载到环境中

	加载驱动程序：Class.forName(driverClass)
	加载MySQL驱动：Class.forName(“com.mysql.jdbc.Driver”);
	加载Oracle驱动：Class.forName(“oracle.jdbc.driver.OracleDriver”)

	获取数据库连接： 通过数据库地址，用户名+密码
DriverManager.getConnection(“jdbc:mysql://127.0.0.1:3306/imooc”,”root”,”root”);
	创建Statement对象：conn.createStatement();

3.详细设计
	采用MVC三层架构
		View（视图层）：对数据的展示

		Control（控制层）：控制数据的流通过程，桥梁的作用，连接视图层与模型层。


		Model（模型层）：数据库映射，对应数据库映射的抽象方法。（CRUD：增删改查）

		DB（数据库）


开发模式：从下往上（数据库-模型-控制-视图）


视图层
	流程：
	* 程序启动后，一直保持在运行状态
	* 循环接收控制台输入的参数
	* 调用Action（控制层）响应，并将返回结果展示在控制台中
	* 直到输入特定的输入标记（如EXIT）后，程序退出。

	问题点：
	* 循环接收参数
	* 某个功能的保持






