MySQL 基础、安装、配置、使用
	属于Oracle公司
	开源、关系型数据库管理系统。
分为社区版和企业版

mysql默认端口号是3306

启动和停止MySQL服务（mac 不适用）
	net start mysql （net + start +服务）
	net stop mysql

mac 使用
	mysql.server start

登陆与退出
	登陆客户端向服务器发送指令
	mysql + 参数
	-D 打开指定数据库
	-V 版本
	-h 服务器名称  127.0.0.1 本地回环地址
	-u 用户名
	-p 密码
	-P 端口号
	
MySQL退出
	exit;
	quit;
	\q;

修改MySQL提示符
第一种方式：
	连接客户端时通过参数指定（不一定是root）
shell>mysql -uroot -proot —-prompt 提示符
第二种方式：	
	连接上客户端后，通过prompt命令修改
	mysql>prompt 提示符
	
Mysql提示符
	\D  完整的日期
	\d  当前数据库
	\h  服务器名称
	\u  当前用户

修改 prompt \u@\h \d
    
MySQL常用命令以及语法规范
1.显示当前服务器版本
	SELECT VERSION();
2.显示当前日期时间
	SELECT NOW();
3.显示当前用户
	SELECT USER();

语句规范
1.关键字与函数名称全部大写 （小写也可以辨认）
2.数据库名称、表名称、字段名称全部小写。
3.SQL语句必须以分号结尾。

操作数据库
1.创建数据库 {}必选项，[]可选项
	CREATE {DATABASE|SCHEMA} [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET[=] chart_name

如： CREATE DATABASE t1;
    CREATE DATABASE IF NOT EXISTS t1 DEFAULT CHARACTER SET=utf-8;

2.查看当前服务器下的数据表列表
	SHOW {DATABASE|SCHEMAS} [LIKE ‘PATTER’ | WHERE expr]
  查看创建的数据库
	SHOW CREATE DATABASE t2;
  查看警告信息
	show warnings;
  查看描述表
	DESC tb_name;     // describe描述

3.修改数据库
	ALTER {DATABASE|SCHEMA} [db_name] [DEFAULT] CHARACTER SET[=] charset_name;
  更改数据库编码
   如：ALTER DATABASE t1 CHARACTER SET utf8;

4.删除数据库
	DROP {DATABASE|SCHEMA} [IF EXISTS] db_name;

====================================================

数据类型与创建数据表

  数据类型：数据列存储过程的参数，表达式，数据特征，数据的存储格式。

整型       字节数    念作
TINYINT     1     tiny INT
SMALLINT    2
MEDIUMINT   3
INT         4
BIGINT      8

后面+ UNSIGNED 则是无符号的。

浮点型
FLOAT[(M,D)]    M是数字的总位数（小数点前+小数点后），
			  D小数点后面的位数，单精度可以精确到小数点后面7位
DOUBLE[(M,D)] 

日期时间型    字节数
YEAR          1      默认是4位  1970-2069（用的比较少）
TIME          3      
DATE          3
DATETIME      8      
TIMESTAMP     4      1970.1.1 - 2037.12.30

字符型       存储要求
CHAR(M)       M个字节，M为0-255
VARCHAR(M)    M为0-65535
TINYTEXT
TEXT
MEDIUMTEXT
LONGTEXT
ENUM{‘value1‘，‘value2’}
SET{‘value1’,’value2’}

数据表的操作
	数据表是数据库最重要的组成部分之一，是其他对象的基础
行：记录
列：字段

打开数据库
	USE 数据库名称;
显示现在打开的数据库
	SELECT DATABASE();

创建数据表
	CREATE TABLE [IF NOT EXISTS] table_name (
		column_name data_type,
		… …
		)

查看数据表列表
	SHOW TABLES[FROM db_name][LIKE ‘pattern’ | WHERE expr]

查看数据表结构
	SHOW COLUMNS FROM tb_name;

插入记录
	INSERT [INFO] tb_name [(col_name,…)] VALUES(val,…);

记录查找  expr = expression = 表达式
	SELECT expr,… FROM tb_name;

select * from tb1;  星号是指字段的过滤，不是记录的过滤。

空值与非空(约束)
NULL,字段值可以为空。
NOT NULL,字段值禁止为空。

AUTO_INCREMENT 必须定义为主键！
自动编号，必须与主键组合使用。
默认情况下，起始值为1，每次的增量为1。

主键
PRIMARY KEY
每张数据表只能存在一个主键，主键保证记录的唯一性，自动为NOT NULL。
主键可以不定义为AUTO_INCREMENT

唯一约束
UNIQUE KEY
可以保证记录的唯一性，唯一约束的字段可以为空值(NULL).
区别：主键一张表只能有一个，不可以为空值。
每张数据表可以存在多个唯一约束。

默认约束
DEFALUT 3
默认值，当插入记录时，如果没有明确为字段赋值，则自动赋予默认值。
create table tb6(
    -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    -> username varchar(20) not null unique key,
    -> sex ENUM('1','2','3') DEFAULT '3',
    -> );

==================================================
约束与数据表

约束
	1.保证数据的完整性和一致性；
	2.约束分为表级约束（针对两个或两个以上字段使用）
		和列级约束（针对某一个字段使用）
	3.约束类型：
		NOT NULL(非空约束)
		PRIMARY KEY(主键约束)
		UNIQUE KEY(唯一约束)
		DEFALUT(默认约束)
		FOREIGN KEY(外键约束)

外键约束
	保证数据的一致性，完整性。
	实现一对一或一对多关系。
  要求：子表:含有外键的表，父表：子表参照的表
	1.父表和子表必须使用相同的存储引擎，禁止使用临时表，数据表存储引擎只能为InnoDB。
	2.外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同，而字符的长度则可以不同。
	3.外键列和参照列必须创建索引，如果外键列不存在索引的话，MySQL将自动创建索引。// 参照列不存在索引会自动创建，外键列不存在不会自动创建。


编辑数据表的默认存储引擎
   MySQL配置文件
	default-storage-engine=InnoDB
  
mysql> create table users(
    -> id smallint unsigned auto_increment,
    -> username varchar(20) not null,
    -> pid smallint,
    -> FOREIGN KEY(pid) REFERENCES province(id)
    -> );

显示索引
	show indexs from db_name\G;  \G以网格形式呈现。

外键约束的参照操作(在父表更新，是否会在子表中也更新)
1.CASCADE:从父表删除或更新且自动删除或更新子表中匹配的行。
2.SET NULL:从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列没有指定NOT NULL.
3.RESTRICT:拒绝对父表的删除或更新操作。
4.NO ACTION:标准SQL的关键字，在MySQL中与RESTRICT相同。

删除父表的记录，会有一个影响
delete from pprovince where id=3;
Query OK, 1 row affected (0.00 sec)

开发中，很少使用物理的外键约束，一般使用逻辑的外键约束。
逻辑外键：不会使用foreign key 关键字。

表级约束与列级约束
1.对一个数据列建立的约束，称为列级约束。
2.对多个数据列建立的约束，称为表级约束。
3.列级约束既可以在列定义时声明，也可以在列定义后声明。
4.表级约束只能在列定义后声明。

=============================================
修改数据表
列增加、删除，约束添加、删除
针对字段的操作：添加/删除字段、修改列定义、修改列名称。
针对约束的操作：添加/删除各种约束。
针对数据表的操作：数据表更名（两种方式）

添加单列
	ALTER TABLE tb_name ADD[COLUMN] col_name column_definition [FIRST|AFTER col_name]
    默认加在最后列的后面
	alter table users1 add age tinyint unsigned not null default 10;

添加多列，不能指定位置关系
	ALTER TABLE tb_name ADD[COLUMN] (col_name column_definition,…)

删除列
	ALTER TABLE tb_name DROP col_name;

删除多列
	ALTER TABLE tb_name DROP col_name，DROP col_name;

删除的同时增加列，用,分隔即可。
	ALTER TABLE tb_name DROP col_name，ADD col_name;

添加主键约束
	ALTER TABLE tb_name ADD [CONSTRAINT[symbol]] PRIMARY KEY [index_type](index_col_name);
// constraint 给约束起名字
如：ALTER TABLE tb ADD CONSTRAINT PK_users2_id PRIMARY KEY(id); 

[index_type]索引类型
	有两种，hash索引 和 B树索引。默认是 B tree。

添加唯一约束
	ALTER TABLE tb_name ADD [CONSTRAINT[symbol]] UNIQUE [INDEX|KEY][index_name][index_type](index_col_name,…);

如：alter table users2 add unique(username);

添加外键约束
	ALTER TABLE tb_name ADD [CONSTRAINT[symbol]] FOREIGN KEY[index_name](index_col_name,…) reference_definition;

如：alter table users2 add foreign key (pid) references pprovince(id);

添加/删除默认约束
	ALTER TABLE tb_name ALTER [COLUMN] col_name {SET DEFAULT literal|DROP DEFAULT}
 
如：alter table users2 alter age set default 15;
如：alter table users2 alter age drop default;

删除主键约束(任何一张数据表，有且只有一个主键)
	ALTER TALBE tb_name DROP PRIMARY KEY;

删除唯一约束
	ALTER TABLE tb_name DROP {INDEX|KEY} index_name;

如：ALTER TABLE users2 DROP INDEX username;

查看唯一约束  \G是以网格的形式呈现
	SHOW INDEXES FROM users2\G;

删除外键约束
	ALTER TABLE tb_name DROP FOREIGN KEY fk_symbol;

如:先show create table users2;查看外键约束的名字
	CONSTRAINT `users2_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `pprovince` (`id`)
	接着：ALTER TABLE tb_name DROP FOREIGN KEY users2_ibfk_1;

修改列定义:数据类型，字段位置
	ALTER TABLE tb_name MODIFY [COLUMN] col_name column_defination [FIRST|AFTER col_name]

如：将id挪到第一列。
	alter table users2 modify id smallint unsigned not null first;

若从大类型改为小类型，数据可能发生丢失。

修改列名称，change 功能 > modify 
	ALTER TABLE tb_name CHANGE [COLUMN] old_col_name new_col_name column_defination [FIRST|AFTER col_name]

修改数据表的名字
	ALTER TALBE tb_name RENAME [TO|AS] new_tb_name;
或者,修改多个数据表名称
	RENAME TABLE tb_name TO new_tb_name[,tb_name TO new_tb_name…];

=========================================================
记录操作
记录插入、查找、删除

增删改查
- - - - - - - - - - - - - - - - - - - - - - - - - - - -
插入记录1
	INSERT [INTO] tb_name [(col_name,…)] {VALUES|VALUE} ({expr|DEFAULT},…),(…),…;

若是有自动增量的列，可用null/default来占位。
如：insert users values(null,’Jon',123,25,1); 

书写表达式
	insert users values(null,’Jon',123,3*7-5,1); 
若有字段是default，则可以用default来占位
	insert users values(null,’Jon',123,default,1); 

写入多个记录
	insert users values(null,’Jon',123,25,1),(null,’Jon’,md5(‘123’),25,1);

// md5(‘x’) 是php当中计算字符串md5的hash

插入记录2
	INSERT [INTO] tb_name SET col_name ={expr|DEFAULT},…
与上一种区别：此方法可以用于子查询（subQuery），只能一次插入一条记录。

如：insert users set id=4,username='mary', password=456, sex=0; 

插入记录3
	INSERT [INTO] tb_name [(col_name,…)] SELECT … 
说明：此方法可以将查询结果插入到指定数据表。

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
更新记录（单表更新）
	UPDATE [LOW_PRIORITY][IGNORE] table_reference SET col_name1={expr|DEFAULT}[,col_name2={expr|DEFAULT}…][WHERE where_condition]

如： 省略更新条件，则会全部更新。
	update users set age = age+5;
    	update users set age = age-id,sex=0;
	更新过程增加条件
	update users set age = age+10 where id%2=0;

多表更新，在连接之后再说。

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
删除记录（单表删除）
	DELETE FROM tb_name [WHERE where_condition];

如：DELETE FROM users where id=4;  

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
查找记录(查询)
	SELECT select_expr[,select_expr …]
[
	FROM table_references
	[WHERE where_condition]
	[GROUP BY {col_name|position} [ASC|DESC],…]
	[HAVING where_conditon]
	[ORDER BY {col_name|position} [ASC|DESC],…]
	[LIMIT {[offset,] row_count |row_count OFFSET offset}]
] 

查询表达式
	select_expr
1.每一个表达式表示想要的一列，必须有至少一个。
2.多个列之间以英文逗号分隔。
3.星号(*)表示所有列。
4.查询表达式可以使用[AS]alias_name为其赋予别名。
5.别名可用于GROUP BY,ORDER BY,或HAVING子句。

多表存在相同字段，利用表名来辨别
	select users.id,users.username from users;

别名
	SELECT id AS userid FROM users;

as可以不用，但建议不省略。
如：select id username from users; // username是id别名
   select id,username from users;

条件表达式 WHERE
	对记录进行过滤，如果没有指定WHERE子句，则显示所有记录。

查询结果分组 GROUP BY
	[GROUP BY {col_name|position} [ASC|DESC],…]

ASC：升序（默认）
DESS：降序
	根据很多字段来进行分组。

如：select sex from users group by sex;
   select sex from users group by 1; //根据第一个出现的字段进行分组。

分组条件 HAVING
	对某一部分记录进行分组
	[HAVING where_conditon]
如：select sex,age from users group by sex having age>30;
	having后面出现的字段必须出现在select中，或者是聚合函数，如sum，avg，max，min，count。。。（聚合函数只有一个返回结果）

对结果进行排序 ORDER BY
	[ORDER BY {col_name|position} [ASC|DESC],…]

如：SELECT * FROM users ORDER BY id DESC;
   SELECT * FROM users ORDER BY age,id DESC; //先对age升序，相同按照id降序排列。

限制查询结果返回的数量 LIMIT
	[LIMIT {[offset,] row_count |row_count OFFSET offset}]
offset：偏移量
如：select * from users limit 2;
   从第3个开始的2条记录
	select * from users limit 2,2; // 从0开始数。

如：select * from users order by id limit 2,2;

把查询结果插入到记录表中
	INSERT [INTO] tb_name [(col_name,…)] SELECT …

如：insert test SELECT id,username FROM users WHERE age>=30;

===========================================================

子查询、连接、多表删除、多表更新

更改客户端显示数据的格式
	SET NAMES gbk;

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
子查询
	出现在其他SQL语句内的SELECT子句
如：SELECT * FROM t1 WHERE col1 =(SELECT col2 FROM t2);
其中
	SELECT * FROM t1为Outer Query 外查询，
	SELECT col2 FROM t2为SubQuery 子查询。

子查询
1.嵌套在查询内部，且必须始终出现在圆括号内。
2.子查询可以包含多个关键字或条件。如：DISTINCT,GROUP BY,ORDER BY,LIMIT,函数等。 
3.子查询的外层查询可以是：SELECT INSERT UPDATE SET 或 DO。

查询不单单是指查找，是所有SQL语句的统称，包含增删改查。

子查询返回值
	可以返回标量、一行、一列或子查询。

使用比较运算符的子查询
	=，>，<，等等。

语法结构
	operand comparison_operator subquery

商品平均价格
	select avg(goods_price) from tdb_goods;
四舍五入
	select round(avg(goods_price),2) from tdb_goods;

子查询
	SELECT goods_id,goods_name,goods_price FROM tdb_goods 
  WHERE goods_price > (SELECT ROUND(AVG(goods_price),2) AS avg_price FROM tdb_goods) ORDER BY goods_price DESC;


查询价格大于或等于"超级本"价格的商品，并且按价格降序排列
   SELECT goods_id,goods_name,goods_price FROM tdb_goods 
   WHERE goods_price = ANY(SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本')
   ORDER BY goods_price DESC;

用ANY、SOME、ALL修饰的比较运算符
	ANY=SOME，符合其中的一个
	ALL，符合全部
	
	   ANY      ALL
>,>=   最小值    最大值
=      任意值      ×
<>,!=    ×      任意值

使用 [NOT] IN 的子查询 

使用[NOT] EXISTS 的子查询
	如果子查询返回任何行，EXISTS将返回TRUE,否则为FALSE。


参照别的表来更新
-- 通过tdb_goods_cates数据表来更新tdb_goods表
  UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name 
  SET goods_cate = cate_id ;

多表更新
	UPDATE table_references 
	SET col_name1={expr1|DEFAULT}
	[,col_name2={expr2|DEFAULT}]…
	[WHERE where_condition]

-- 通过tdb_goods_cates数据表来更新tdb_goods表
  UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name 
  SET goods_cate = cate_id ;

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
连接
	MySQL在SELECT语句、多表更新、多表删除语句中支持JOIN操作。

语法结构，表达参照关系  
	table_reference		  // 第一张表
	{[INNER|CROSS]JOIN|{LEFT|RIGHT}[OUTER]JOIN}  // 连接类型
	table_reference		  // 第二张表
	ON conditional_expr       // 连接条件

数据表参照 alias=别名
	table_reference
	tb_name[[AS] alias]|table_subquery [AS] alias

数据表可以用tb_name AS alias 赋予别名

table_subquery可以作为子查询使用在FROM子句中，这样的子查询必须赋予别名。*****************必须起别名***************

连接类型
1.INNER JOIN，内连接
    在MySQL中，JOIN, CROSS JOIN, INNER JOIN是等价的。
2.LEFT[OUTER] JOIN ，左外连接。
3.RIGHT[OUTER] JOIN ，右外连接。

连接条件
1.使用ON关键字来设定连接条件，也可以使用WHERE来代替。
2.通常使用ON关键字来设定连接条件。
3.使用WHERE关键字来进行结果集记录的过滤。

内连接
	仅显示左表和右表符合连接条件的记录。

左外连接
	显示左表的全部 及 右表符合连接条件的记录

右外连接
	显示右表的全部 及 左表符合连接条件的记录

三张表连接
-— 查询所有商品的详细信息(通过内连接实现)
   SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g
   INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id
   INNER JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;

- - - - - - - - - - - - - - - - - - - - - - - - - - - -

CREATE…SELECT
创建数据表同时将查询结果写入数据表。
	CREATE TABLE tb_name
	[(create_definition,…)]
	select_statement

-- 通过CREATE...SELECT来创建数据表并且同时写入记录
	CREATE TABLE tdb_goods_brands (
    brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    brand_name VARCHAR(40) NOT NULL
  ) SELECT brand_name FROM tdb_goods GROUP BY brand_name;


-- 通过tdb_goods_brands数据表来更新tdb_goods数据表(错误)
  UPDATE tdb_goods  INNER JOIN tdb_goods_brands ON brand_name = brand_name
  SET brand_name = brand_id;
  -- Column 'brand_name' in field list is ambigous

  -- 正确
  UPDATE tdb_goods AS  g  INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name
  SET g.brand_name = b.brand_id;
 
*********不需要一定要物理外键，foreign key.如上面的连接。*********
如果不是用物理外键，则存入的数据只需要依照创建表的类型插入即可，而不需要满足外键约束，即父表中没有的记录，子表中也可以插入。

- - - - - - - - - - - - - - - - - - - - - - - - - - - -

无限分类的数据表
-- 无限分类的数据表设计
   CREATE TABLE tdb_goods_types(
     type_id   SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
     type_name VARCHAR(20) NOT NULL,
     parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0    
  ); 

查找
	通过自身连接来实现。

-- 查找所有分类及其父类
  SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS  p ON s.parent_id = p.type_id;

+---------+-----------------+-----------------+
| type_id | type_name       | type_name       |
+---------+-----------------+-----------------+
|       1 | 家用电器        | NULL            |
|       2 | 电脑、办公      | NULL            |
|       3 | 大家电          | 家用电器        |
|       4 | 生活电器        | 家用电器        |
|       5 | 平板电视        | 大家电          |
|       6 | 空调            | 大家电          |
|       7 | 电风扇          | 生活电器        |
|       8 | 饮水机          | 生活电器        |
|       9 | 电脑整机        | 电脑、办公      |
|      10 | 电脑配件        | 电脑、办公      |
|      11 | 笔记本          | 电脑整机        |
|      12 | 超级本          | 电脑整机        |
|      13 | 游戏本          | 电脑整机        |
|      14 | CPU             | 电脑配件        |
|      15 | 主机            | 电脑配件        |
+---------+-----------------+-----------------+

-- 查找所有分类及其子类
  SELECT p.type_id,p.type_name,s.type_name FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS  s ON s.parent_id = p.type_id;	
+---------+-----------------+--------------+
| type_id | type_name       | type_name    |
+---------+-----------------+--------------+
|       1 | 家用电器        | 大家电       |
|       1 | 家用电器        | 生活电器     |
|       3 | 大家电          | 平板电视     |
|       3 | 大家电          | 空调         |
|       4 | 生活电器        | 电风扇       |
|       4 | 生活电器        | 饮水机       |
|       2 | 电脑、办公      | 电脑整机     |
|       2 | 电脑、办公      | 电脑配件     |
|       9 | 电脑整机        | 笔记本       |
|       9 | 电脑整机        | 超级本       |
|       9 | 电脑整机        | 游戏本       |
|      10 | 电脑配件        | CPU          |
|      10 | 电脑配件        | 主机         |
|       5 | 平板电视        | NULL         |
|       6 | 空调            | NULL         |
|       7 | 电风扇          | NULL         |
|       8 | 饮水机          | NULL         |
|      11 | 笔记本          | NULL         |
|      12 | 超级本          | NULL         |
|      13 | 游戏本          | NULL         |
|      14 | CPU             | NULL         |
|      15 | 主机            | NULL         |
+---------+-----------------+--------------+

-- 查找所有分类及其子类的数目

  SELECT p.type_id,p.type_name,count(s.type_name) AS children_count FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s ON s.parent_id = p.type_id GROUP BY p.type_name ORDER BY p.type_id;

+---------+-----------------+---------------+
| type_id | type_name       | children_coun |
+---------+-----------------+---------------+
|       1 | 家用电器        |             2 |
|       2 | 电脑、办公      |             2 |
|       3 | 大家电          |             2 |
|       4 | 生活电器        |             2 |
|       5 | 平板电视        |             0 |
|       6 | 空调            |             0 |
|       7 | 电风扇          |             0 |
|       8 | 饮水机          |             0 |
|       9 | 电脑整机        |             3 |
|      10 | 电脑配件        |             2 |
|      11 | 笔记本          |             0 |
|      12 | 超级本          |             0 |
|      13 | 游戏本          |             0 |
|      14 | CPU             |             0 |
|      15 | 主机            |             0 |
+---------+-----------------+---------------+


- - - - - - - - - - - - - - - - - - - - - - - - - - - -
多表删除
	DELETE tb_name [.*][,tb_name[.*]]…
	FROM table_references
	[WHERE where_condition]
 
删除重复记录，通过一张表来模拟两张表,保留id最小的那条记录
	 DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2 ) AS t2  ON t1.goods_name = t2.goods_name  WHERE t1.goods_id > t2.goods_id;   

查找到相同的商品名称
	select goods_id,goods_name from tdb_goods group by goods_name having count(goods_name)>=2;


===========================================================

MySQL中的运算符与函数

1.字符函数
2.数值运算符与函数
3.比较运算符与函数
4.日期时间函数
5.信息函数
6.聚合函数
7.加密函数

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
一、字符函数
	
CONCAT()			字符连接
CONCAT_WS()		使用指定的分隔符进行字符连接
FORMAT()			数字格式化
LOWER()			转换成小写字母
UPPER()			转换成大写字母
LEFT()			获取左侧字符
RIGHT()			获取右侧字符

LENGTH()			获取字符串长度
LTRIM()			删除前导空格
RTRIM()			删除后续空格
TRIM()			删除前导和后续空格
SUBSTRING()		字符串截取
[NOT]LIKE			模式匹配
REPLACE()			字符串替换 

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
例子：

CONCAT()			字符连接

1.select CONCAT('imooc','mysql');
+-------------------------+
| CONCAT('imooc','mysql') |
+-------------------------+
| imoocmysql              |
+-------------------------+

2.select CONCAT('imooc’,‘-’,’mysql');
	imooc-mysql

3. select concat（first_name,last_name）as full name from test;

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
CONCAT_WS()		使用指定的分隔符进行字符连接

有三个参数，第一个指定用什么分隔符
1.SELECT CONCAT_WS('|','A','B','C');
+----------------------------+
| CONCAT_WS('|','A','B','C') |
+----------------------------+
| A|B|C                      |
+----------------------------+


- - - - - - - - - - - - - - - - - - - - - - - - - - - -
FORMAT()			数字格式化

1.SELECT FORMAT(12356.75 , 2);  // 保留小数点后面两位

+----------------------+
| FORMAT(12356.75 , 2) |
+----------------------+
| 12,356.75            |
+----------------------+

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
LOWER()			转换成小写字母
UPPER()			转换成大写字母

1.SELECT LOWER(‘MySQL’);
+----------------+
| LOWER('MySQL') |
+----------------+
| mysql          |
+----------------+

2.SELECT UPPER(‘MySQL’);


- - - - - - - - - - - - - - - - - - - - - - - - - - - -
LEFT()			获取左侧字符
RIGHT()			获取右侧字符

两个参数：第一个从哪个字符中获取，第二个是从第几位。

1.SELECT LEFT('MySQL',2);
+-----------------+
| LEFT('MySQL',2) |
+-----------------+
| My              |
+-----------------+

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
LENGTH()			获取字符串长度
LTRIM()			删除前导空格
RTRIM()			删除后续空格
TRIM()			删除前导和后续空格
SUBSTRING()		字符串截取
[NOT]LIKE			模式匹配
REPLACE()			字符串替换 


1.SELECT length(‘MySQL');

+-----------------+
| length('mysql') |
+-----------------+
|               5 |
+-----------------+

2.SELECT TRIM(‘   Mysql  ’);

+----------------------+
| trim('   mysql    ') |
+----------------------+
| mysql                |
+----------------------+

3.SELECT LENGTH(TRIM(‘   MySQL  ‘));

4.TRIM() 删除特定的字符串
  SELECT TRIM(LEADING '?' FROM '??MySQL???');

+-------------------------------------+
| TRIM(LEADING '?' FROM '??MySQL???') |
+-------------------------------------+
| MySQL???                            |
+-------------------------------------+

5.TRIM() 删除特定的字符串
  SELECT TRIM(TRAILING '?' FROM '??MySQL???');

6.TRIM() 删除特定的字符串
  SELECT TRIM(BOTH '?' FROM '??MySQL???');

7.删除中间的特定字符，用字符替换
    把?替换成空字符。
  SELECT REPLACE(‘??My???SQL??’,’?’,’’);

8.SUBSTRING() 字符串截取
	三个参数：哪个字符，从第几位开始，截几位。（这里字符串从1开始）
	
   SELECT SUBSTRING('MYSQL',1,3);	
+------------------------+
| SUBSTRING('MYSQL',1,3) |
+------------------------+
| MYS                    |
+------------------------+

	SELECT SUBSTRING('MYSQL',1);	
+----------------------+
| SUBSTRING('MYSQL',1) |
+----------------------+
| MYSQL                |
+----------------------+

	SELECT SUBSTRING('MYSQL',-1);  最后一位是-1.
+-----------------------+
| SUBSTRING('MYSQL',-1) |
+-----------------------+
| L                     |
+-----------------------+

	SELECT SUBSTRING('MYSQL',-4,3);
+-------------------------+
| SUBSTRING('MYSQL',-4,3) |
+-------------------------+
| YSQ                     |
+-------------------------+

9.LIKE 与 NOT LIKE 模式匹配
	% 相当于 *
	 SELECT 'MySQL' like 'M%';
+-------------------+
| 'MySQL' like 'M%' |
+-------------------+
|                 1 |
+-------------------+

SELECT * FROM test WHERE first_name LIKE ‘%0%’;

若是要匹配字符中的%,认为1后面的字符是标准字符%，而不需要进行解析。
	SELECT * FROM test WHERE first_name LIKE ‘%1%%’ ESCAPE ‘1’;

***********************************************************

重点：

%（百分号）：代表 任意个 字符。
_（下划线）：代表 任意一个 字符。

***********************************************************

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
二、数值运算符与函数

CEIL()		进一取整
FLOOR()		舍一取整
DIV			整数除法
MOD			取余数
POWER()		幂运算
ROUND()		四舍五入
TRUNCATE()	数字截取

1.SELECT 2+5;
+-----+
| 2+5 |
+-----+
|   7 |
+-----+

2.CEIL 向上取整
	select ceil(3.01);
+------------+
| ceil(3.01) |
+------------+
|          4 |
+------------+

3.FLOOR 向下取整
	select floor(3.99);
+-------------+
| floor(3.99) |
+-------------+
|           3 |
+-------------+

4.DIV 整数除法
	SELECT 3 DIV 4;
+---------+
| 3 DIV 4 |
+---------+
|       0 |
+---------+

5.MOD取余数
	小数取余数也可以
	select 5.3 mod 3;
+-----------+
| 5.3 mod 3 |
+-----------+
|       2.3 |
+-----------+

6.POWER() 
	SELECT POWER(3,3);
+------------+
| POWER(3,3) |
+------------+
|         27 |
+------------+

7.ROUND() 四舍五入

8.truncate() 数字截断
	select truncate(125.89333,2);
+-----------------------+
| truncate(125.89333,2) |
+-----------------------+
|                125.89 |
+-----------------------+

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
三、比较运算符与函数

[NOT] BETWEEN…AND… 		[不]在范围之内
[NOT] IN()			[不]在列出值范围内
IS [NOT] NULL			[不]为空

1.select 15 between 1 and 22;
+---------------------+
| 15 between 1 and 22 |
+---------------------+
|                   1 |
+---------------------+

2.select 10 in(10,15,20);
+-----------------+
| 10 in(10,15,20) |
+-----------------+
|               1 |
+-----------------+

3.select null is null;
+--------------+
| null is null |
+--------------+
|            1 |
+--------------+

4. select '' is null;
+------------+
| '' is null |
+------------+
|          0 |
+------------+

5.select 0 is null;
+-----------+
| 0 is null |
+-----------+
|         0 |
+-----------+


- - - - - - - - - - - - - - - - - - - - - - - - - - - -
四、日期时间函数

NOW()			当前日期和时间
CURDATE()			当前日期
CURTIME()			当前时间
DATE_ADD()		日期变化
DATEDIFF()		日期差值
DATE_FORMAT()		日期格式化

1. select now();
+---------------------+
| now()               |
+---------------------+
| 2016-01-04 19:12:32 |
+---------------------+

2.select curdate();   // current date
+------------+
| curdate()  |
+------------+
| 2016-01-04 |
+------------+

3.select date_add(curdate(),INTERVAL 365 DAY);
+--------------------------------------+
| date_add(curdate(),INTERVAL 365 DAY) |
+--------------------------------------+
| 2017-01-03                           |
+--------------------------------------+

4.select date_add(curdate(),INTERVAL -365 DAY);
+---------------------------------------+
| date_add(curdate(),INTERVAL -365 DAY) |
+---------------------------------------+
| 2015-01-04                            |
+---------------------------------------+

5.select date_add(curdate(),INTERVAL 1 YEAR);
+-------------------------------------+
| date_add(curdate(),INTERVAL 1 YEAR) |
+-------------------------------------+
| 2017-01-04                          |
+-------------------------------------+

常见单位：DAY,YEAR,WEEK,MONTH...

6.SELECT DATEDIFF('2013-3-12','2015-01-04');
+------------------------------------+
| DATEDIFF('2013-3-12','2015-01-04') |
+------------------------------------+
|                               -663 |
+------------------------------------+

7.转换日期格式
	select date_format(curdate(),'%m/%d/%Y');
+-----------------------------------+
| date_format(curdate(),'%m/%d/%Y') |
+-----------------------------------+
| 01/04/2016                        |
+-----------------------------------+


- - - - - - - - - - - - - - - - - - - - - - - - - - - -
五、信息函数

CONNECTION_ID()	连接ID
DATEBASE()		当前数据库
LAST_INSERTz_ID()	最后插入记录的ID号
USER()			当前用户
VERSION()			版本信息

1.select connection_id();
+-----------------+
| connection_id() |
+-----------------+
|               4 |
+-----------------+

2.select database();
+------------+
| database() |
+------------+
| NULL       |
+------------+

3.select user();
+------------------+
| user()           |
+------------------+
| kiroro@localhost |
+------------------+

4. select version();
+-----------+
| version() |
+-----------+
| 5.6.26    |
+-----------+

- - - - - - - - - - - - - - - - - - - - - - - - - - - -
六、聚合函数 ： 只有一个返回值

AVG()
COUNT()
MAX()
MIN()
SUM()

1. select avg(id) from users;
+---------+
| avg(id) |
+---------+
|  2.5000 |
+---------+


- - - - - - - - - - - - - - - - - - - - - - - - - - - -
七、加密函数 

MD5()		信息摘要算法
PASSWORD()	密码算法

1.SELECT MD5('ADMIN');
+----------------------------------+
| MD5('ADMIN')                     |
+----------------------------------+
| 73acd9a5972130b75066c82595a1fae3 |
+----------------------------------+

2.SELECT PASSWORD('ADMIN');
+-------------------------------------------+
| PASSWORD('ADMIN')                         |
+-------------------------------------------+
| *0B0A27832C339662F96E0238AD92FCBCB992A7EA |
+-------------------------------------------+

**********************************************************
修改密码
SET PASSWORD = PASSWORD(‘new_password’);

==========================================================

自定义函数

   用户自定义函数（user-defined function ,UDF）是一种对MySQL扩展的途径，用法与内置函数相同。

自定义函数的两个必要条件：
1.参数   
2.返回值

—-函数可以返回任一类型的值，同样可以接收这些类型的参数。

创建自定义函数
	CREATE FUNCTION function_name
	RETURNS
	{STRING|INTEGER|REAL|DECIMAL}
	routine_body;       // 函数体

函数体
	1、函数体由合法的SQL语句构成；
	2、函数体可以是简单的SELECT或INSERT语句；
	3、函数体如果为复合结构则使用BEGIN...END语句
	4、复合结构可以包含声明、循环、控制结构。

1.select date_format(now(),'%Y年%m月%d日 %H点：%i分：%s秒');
+------------------------------------------------------------+
| date_format(now(),'%Y年%m月%d日 %H点：%i分：%s秒')         |
+------------------------------------------------------------+
| 2016年01月04日 19点：43分：10秒                            |
+------------------------------------------------------------+	

例如：
	创建无参的函数,将上面的封装为一个函数

1.create function f1() RETURNS VARCHAR(30)
     RETURN date_format(now(),'%Y年%m月%d日 %H点:%i分:%s秒');

调用：SELECT f1();

	创建含有参数的函数。
2.create function f2(num1 smallint unsigned,num2 smallint unsigned) 
     Returns float(10,2) unsigned
     return (num1+num2)/2;

调用：select f2(2,4);

	
**********************************************************
修改命令符

DELIMITER //   所有语句都要以//来结束，而不是用;
**********************************************************

复合结构，在body中有多条语句，使用begin...and
	CREATE FUNCTION adduser(username VARCHARN(20))
	RETURNS INT UNSGINED
	BEGIN
	INSERT test(username) values(username);
	RETURN LAST_INSERT_ID();
	END
	//


- - - - - - - - - - - - - - - - - - - - - - - - - - - -
删除函数
	DROP FUNCTION [IF EXISTS] function_name


==========================================================

存储过程

  SQL命令→→MySQL引擎—-分析—-语法正确—-可识别命令—-执行—-执行结果—-返回—-客户端

  省略语法分析和编译环节，则效率会提高。

  存储过程：SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理。存在数据库内，由应用程序调用执行，允许用户进行声明变量。

  存储过程比单一SQL语句效率要高。只有在第一次进行语法分析和编译。后面调用只需调用结果。

优点：
1.增强SQL语句的功能和灵活性
2.实现较快的执行速度
3.减少网络流量，若从客户端通过http协议发送sql语句到服务器端。要提交的数据量较少。

创建存储过程    //sp_name过程名字
	CREATE
	[DEFINER = {user|CURRENT_USER}]
	PROCEDURE sp_name ([proc_parameter[,…]]
	[characteristic …]routine_body
	
过程参数
	proc_parameter
	[IN|OUT|INOUT]param_name type

IN:表示该参数的值必须在调用存储过程时指定。这个值不能被返回，只能进不能出。

OUT:表示该参数的值可以被存储过程改变，并且可以返回。

INOUT:表示该参数的调用时指定，并且可以被改变和返回。

过程体
	跟函数体要求基本相同。
	1、过程体由合法的SQL语句构成；
	2、过程体如果为复合结构则使用BEGIN...END语句
	3、复合结构可以包含声明、循环、控制结构。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
创建没有参数的存储过程
	获取当前MySQL版本的功能
	CREATE PROCEDURE sp1() SELECT VERSION();

调用存储过程
	CALL sp_name([parameter[,…]])
	CALL sp_name[()]     //可以不带有小括号，没有参数的话

如：call sp1;
   call sp1();

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
创建带IN类型参数的存储过程

	CREATE PROCEDURE removeUserById(IN id INT UNSIGNED)
	BEGIN
	DELETE FROM users WHERE user_id=id;   
	END
	//

调用：call removeUserById(3);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
删除存储过程
	DROP PROCEDURE removeUserById;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
创建带OUT类型参数的存储过程

	CREATE PROCEDURE removeUserAndReturnUserNums(IN p_id INT UNSIGNED,OUT userNums INT UNSIGNED)
	BEGIN
	DELETE FROM users WHERE id=p_id;   
	SELECT count(id) FROM users INTO userNums;
	END
	//

调用：call removeUserAndReturnUserNums(27,@num);

    @num是一个变量。可用select @num; 输出变量。

设置用户变量，只对当前的客户端有效。全局变量？？
	SET @i= 7；

BEGIN..END 中间变量，局部变量。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
创建带有多个OUT类型参数的存储过程
    
SELECT ROU_COUNT();   //得到被插入、更新等记录总数。
	
	一个返回删除的用户
	另一个返回剩余的用户
	
	CREATE PROCEDURE removeUserByAgeReturnInfos(IN p_age SMALLINT UNSIGNED,OUT deleteUsers SMALLINT UNSIGNED, OUT userCounts SMALLINT UNSIGNED)
	BEGIN
	DELETE FROM users WHERE age=p_age;   
	SELECT row_count() INTO deleteUsers;
	SELECT count(id) FROM users INTO userCounts;
	END
	//


- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
存储过程 与 自定义函数 的区别

1.存储过程实现的功能要复杂一些，函数的针对性更强。
一般地说：很少用函数针对表来操作。

2.存储过程可以返回多个值，函数只能返回一个值。

3.存储构成一般独立的来执行，而函数可以作为其他SQL语句的组成部分来出现。

注意事项：
1.创建存储过程或者自定义函数时需要通过delimiter语句修改定界符
2.如果函数体或过程体有多个语句，需要包含在BEGIN..END语句块中
3.存储过程用CALL来调用

==========================================================

存储引擎简介

查看数据表的创建命令：
	SHOW CREATE TABLE t;

ENGINE = InnoDB

存储引擎：MySQL可以将数据以不同的技术存储在文件（内存）中，这种技术就成为存储引擎。
	每一种存储引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能。
     关系型数据库中数据的存储是以表的形式来实现，所以存储引擎也称为表类型。
	存储引擎：查询，存储的技术。

存储引擎
	MyISAM
	InnoDB	
	Memory
	CSV
	Archive

- - - - - - - - - - - - - - - - - - - - - - - - - - - - -

并发控制
   当多个连接对记录进行修改时保证数据的一致性和完整性。

两个用户同时登陆，一个用户要删除id为22的记录，另一个用户要读取id为22.
	解决以上问题，用并发控制。使用锁系统来解决。

锁系统：
	两类锁：

    共享锁（读锁）：在同一时间段内，多个用户可以读取同一个资源，读取过程中数据不会发生任何变化。

    排他锁（写锁）：在任何时候只能有一个用户写入资源，当进行写锁时会阻塞其他的读锁或者写锁操作。

	锁的粒度（颗粒）：锁定时的单位，只需对修改的数据进行加锁，而无需对所有的资源加锁。
	
如：存在两个表：用户表、商品表。
	用户登陆后，修改个人注册信息时，用户只需要针对用户表或用户表中的某条记录进行加锁，而不需要对商品表进行加锁。
	在另一个用户修改商品信息时，只需要对商品表进行加锁。

加锁只加最对的，不加最大的。锁策略，锁开销寻找一种最合适的。

锁颗粒
	表锁：一种开销最小的锁策略，当用户针对数据表操作时，用户就获得了这张表的写锁的权限，写锁会禁止其他用户进行读写的操作。
	把整张表锁起来，只需要一把锁。

	行锁：一种开销最大的锁策略。支持最大并发操作处理的一种情况。
	数据表当中有多少条记录，就有可能就需要多少条锁。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - -

事务
	事务用于保证数据库的完整性。

例如：用户A 向 用户B 转账200.

实现步骤：
1.从当前用户减掉200块（账户余额>=200）
2.在对方账户上+200块。

两个过程应当作为一个整体来出现。无论哪个环节出现问题，需要恢复到最原始状态。

事务特性： ACID
	原子性
	一致性
	隔离性
	持久性

- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
外键
	保证数据一致性的策略。

索引
	对数据表中的一列或多列的值进行排序的一种结构。使用索引可以快速的访问数据表当中的特定信息，索引是进行记录快速定位的方法。

索引=书的目录，快速找到书的某一部分内容。

索引：普通索引、唯一索引、全文索引、btree索引、hash索引。。。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
修改存储引擎的方法
   1. 通过修改MySQL配置文件实现
	default-storage-engine = engine

   2. 通过创建数据表命令实现
	CREATE TABLE tb_name
	(
		…
	) ENGINE = MyISAM;

   3.修改数据表引擎
	ALTER TABLE tb_name ENGINE [=] engine_name;


MyISAM:存储限制可达256T，支持索引，表级锁定，数据压缩。
InnoDB:存储限制为64T，支持事务和索引，锁颗粒为行锁。


==========================================================

管理工具

1.PHPAdmin
2.Navicat
3.MySQL Workbench

	
















  
  


		









